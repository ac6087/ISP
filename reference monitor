"""
This security layer interposes on a textfile 
and gives it open, close, read and write access.
However, a user should prevent any   

1) Uppercase letters from being  replaced by lowercase letters 
2) Reads that mix upper and lower case
If a user tries to the security layer will raise an exception.
Note:
  This security layer uses encasementlib.r2py, restrictions.default, repy.py and python
  Also you need to give it an application to run.
  This security layer never runs explicitly but instead interposes functions
  from above layers. 

	"""	

# This is just an example global variable.   It stores a list of the calls the application makes.[[BR]]

BUFFER = []

class SecureFile():
  def __init__(self,privilegedfo):
    self.privilegedfo = privilegedfo
    self.lock=createlock()
    self.is_acquired=False
	
  def readat(self,bytes,offset):
    if self.is_acquired is False:                                                       # if lock is not acquired by any thread,
      self.lock.acquire(True)                                                           # acquire is set
    else:
      while(self.is_acquired is True):                                                  # loop until the lock is released  
        sleep(0.5)                                                                      # sleep for sometime and check again;
      if self.is_acquired is False:		                                                # if it is free, acquire the lock and proceed
        self.lock.acquire(True)		
    try:
      #self.lock.acquire(True)
      BUFFER.append("lock.acquire")
      U_Flag=0
      L_Flag=0
      value = self.privilegedfo.readat(bytes,offset)
      if value is None:                                                                   # if empty string/file
        return none
      for i in value:
        if i.islower():
          L_Flag=1                                                                        # set lower case flag 
        elif i.isupper():
          U_Flag=1                                                                        # set upper case flag
        else:                                                                             # if the data is number or special character
          return value
          return value
        if (i.islower() and U_Flag==1) or (i.isupper() and L_Flag==1):                    # access to read mixed cases 
          raise ValueError()                                                              # is denied 
      BUFFER.append("lock.release")
      BUFFER.append("readat")
      return value			
    finally:
      self.lock.release()
	
  def writeat(self,data,offset):
    if self.is_acquired is False:
      self.lock.acquire(True)
    else:
      while(self.is_acquired is True):
        sleep(2)
        if self.is_acquired is False:		
          self.lock.acquire(True)
    try:
      #self.lock.acquire(True)
      BUFFER.append("lock.acquire")
      i=0
      buffer_list1=[]                                                                      # keeps track of all the upper case letters in the file to be written into
      value=self.privilegedfo.readat(len(data),offset)                                     # read the file from the given offset.
      if value is None:                                                                    # if file location to to be is empty, no need to go into if else clauses
        BUFFER.append("writeat")
        return self.privilegedfo.writeat(data,offset)	
      for j in range(len(value)):                                                          # for each letter
        if value[j].isupper():                                                             # check whether it is upper case  
          if data[i].islower():                                                            # if it is, then the value to be written can not be lower case
            raise ValueError()
          #elif not data[i].islower():			                                           # that is data is a decimal or a digit or a number or special character
            #buffer_list1.append(j)           
        i=i+1				
            #elif not value[j].isalpha():                                                  # what if first the attacker tries to overwrite upper case with 
          #if data[i].islower() and j in buffer_list1:                                     # a special character and then again overwrite the same character with a lower case to pull off his mission (multiple write calls)
            #raise ValueError()		
      BUFFER.append("writeat")
      return self.privilegedfo.writeat(data,offset)
    finally:
      self.lock.release()

  def close(self):
    BUFFER.append("close")
    return self.privilegedfo.close()


def secure_openfile(filename, create):
  BUFFER.append("openfile")
  # Open a file from the layer below (likely the sandbox)
  privilegedfo = openfile(filename,create)
  return SecureFile(privilegedfo)
  
  
# You can ignore the code below here.   It just sets of the security layer so that the application calls it instead of
# the original API functions.
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

sec_file_def = {"obj-type":SecureFile,
    "name":"SecureFile",
    "readat":{TYPE:FUNC,ARGS:((int,long,type(None)),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
    "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(None),TARGET:SecureFile.writeat},
    "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()
